#############################################################################
# PROJECT   : DMX-MAKEFILE
# COPYRIGHT : Andy Thomas (C) 2019
# WEB URL   : https://kuiper.zone
# LICENSE 	: MIT
#############################################################################

################################
# CONFIGURATION
################################

# DMX VARIABLES
# The following constants are pre-defined by DMX and are available for use with the configuration
# settings below. Do not override. For example, $(targ_arch) can be used to specify an output
# directory or filename with a "32" or "64" component according to the target architecture.
#
# $(OPTS)               - If defined, used to specify multiple options allowing the selection
#                         of custom configuration sections.
# $(make_root)          - Fully qualified directory of makefile. Note that this may be different
#                         from the working directory.
# $(targ_build)         - Build target derived from TARG input argument. Unlike $(TARG), the
#                         value is lowercase and always one of: "release" or "debug" (never "all").
#                         Defaults to "debug" if TARG was unspecified.
# $(abbr_build)         - Abbreviation of $(targ_build). Always "rel" or "dbg". For convenience
#                         in forming filenames.
# $(targ_arch)          - Target architecture (bits) derived from ARCH input argument. Unlike
#                         $(ARCH), the value is always one of: "64" or "32". Defaults to
#                         $(sys_arch) if ARCH was unspecified.
# $(targ_xarch)         - A synonym of $(targ_arch). Always "x64" or "x86". For convenience in
#                         forming filenames.
# $(targ_crt)           - C runtime target derived from CRT input argument. Always one of: "static"
#                         or "dynamic". Defaults to "dynamic" if CRT was unspecified.
# $(ms_crt)             - An MS-style variant of $(targ_crt). Additionally, it is suffixed with
#                         "d" for debug target. Possible values: "MT", "MD", "MTd" and "MDd".
# $(sys_arch)           - System architecture. May differ from $(targ_arch). Always "64" or "32".
# $(sys_os)             - System OS type, always "win" or "nix".
# $(sys_vos)            - A variant (synonym) of $(sys_os), always "msw" or "nix".
# $(sys_los)            - Long equivalent of $(sys_os), always "windows" or "linux".
# $(comp_id)            - Compiler toolchain ID. Always one of: "gpp", "mingw" or "msvc".
# $(comp_desc)          - Friendly name for compiler toolchain. I.e. "MinGW g++ 7.1.0".
# $(comp_version)       - Compiler/toolchain version, i.e. "7.1.0".
# $(build_host)         - Hostname of the build platform.
# $(build_date)         - UTC date in ISO-8601 form (i.e. "2018-01-30"). The value is defined
#                         when the makefile executes is constant. On Windows, this requires
#                         that PowerShell is installed otherwise the value is empty. The value
#                         is undefined if the call fails.
# $(build_time)         - UTC time in ISO-8601 form (i.e. "18:41:52Z"). The value is defined
#                         when the makefile executes is constant. On Windows, this requires
#                         that PowerShell is installed otherwise the value is empty. The value
#                         is undefined if the call fails.
# $(build_year)         - Year value extracted from $(build_date).
# $(build_month)        - Month value extracted from $(build_date).
# $(build_day)          - Day value extracted from $(build_date).
# $(build_hour)         - Hour value extracted from $(build_time).
# $(build_minute)       - Minute value extracted from $(build_time).
# $(build_second)       - Second value extracted from $(build_time).
# $(space)              - Literal space character.

# TOOL VARIABLES
# The following "call tools" are available for use in this conf file:
#
# to-lowercase          - Convert string to lowercase (ASCII only).
#                         Example: str_out := $(call to-lowercase,$(str_in))
# to-uppercase          - Convert

################################
# a. COMMON VARS
################################

include $(make_root)/make-vars.conf

################################
# b. PROJECT CONFIGURATION
################################

# PROJECT BASE NAME
# Mandatory base name for the project output file, excluding any extension
# (or prefix) as it will be added automatically. For example, if "myapp" is
# specified for an executable project, the resulting binary will be called
# "myapp.exe" on Windows, and just "myapp" on LINUX. If "test" is used for a
# static library project, the output file will be automatically prefixed with
# "lib" to create "libtest.a" on both LINUX and MinGW. For a shared library,
# the output will be "test.dll" under Windows, and "libtest.so" under LINUX.
BUILD_BASENAME := app

# PROJECT TYPE
# The project build type. Must be one of the following:
#   exe   - Build an executable binary. On windows the output will have
#           the extension ".exe".
#   lib   - Static library. The output will have the extension ".a", and
#           on LINUX, it will be prefixed with "lib".
#   so    - Shared library. On Windows, this generate a DLL, plus its
#           associated import library.
#   mst   - A special type of project that serves a "master project" which
#           build dependent make configurations (sub-modules). It cannot
#           be used to build a project itself. However, master dist, install
#           and custom directory steps can be specified.
BUILD_TYPE := exe

# SHARED LIBRARY NAME
# This setting is used only on LINUX to set the "soname" (logical name) field for
# shared libraries. It should normally be prefixed with "lib", and can be can to:
# "lib$(BUILD_BASENAME).so", so that the name follows the build name. It can also be
# left blank and is ignored under Windows. Example: lib$(BUILD_BASENAME).so.1
NIX_SONAME :=

################################
# c. DIRECTORY LOCATIONS
################################

# INFORMATION: All directory locations should ideally be defined using $(make_root), thus
# making them relative to the makefile, rather than the working directory. Paths below must
# not contain spaces. For portability, always use forward '/' path separator (rather than '\')
# even under Windows. IMPORTANT: all paths under $(make_root) must NOT contain spaces.

# OUTPUT DIRECTORY
# Mandatory final output directory. This directory will be created if it does not exist.
# If planning to compile multiple targets, i.e. release, debug, 32 and 64 bit etc., you
# may want to create a an output directory structure using build variables.
# Example: $(make_root)/bin/$(sys_os)$(targ_arch)/$(abbr_build)-$(targ_crt)
OUT_DIR := $(make_root)/bin

# SOURCE ROOT
# Mandatory source file root directory. All source files MUST BE contained under this location,
# either directly or within a hierarchy under it. Example: $(make_root)/src
SRC_ROOT := $(make_root)/src

# OBJECT DIRECTORY
# Mandatory object directory for temporary build files. This directory will be created if
# it does not exist. There is no need to specify different object directories for each target
# or platform as all temporary files written here will be distinguished using a platform
# specific naming convention. Example: $(make_root)/obj
OBJ_DIR := $(make_root)/obj

# COMMON INCLUDE DIRECTORIES
# One or more optional common include directories, separated by space. These will be
# included for both WINDOWS and LINUX builds. Use the $(make_root) variable to make them
# relative the makefile. Example: $(make_root)/inc
INC_COMMON_DIRS := $(make_root)/inc

# PLATFORM INCLUDE DIRECTORIES
# Append additional platform specific include directories here
# Example: INC_WIN_DIRS := $(make_root)/inc/win32
INC_NIX_DIRS :=
INC_WIN_DIRS :=

# CREATE ADDITIONAL DIRECTORIES
# One or more custom directories, separated by space, to be created during the make.
# This can be used to create additional directories needed by the project, but not
# otherwise defined. For example, it may be used to ensure that the directory
# "${OUT_DIR}/log" is created for use by a binary when it runs.
CUSTOM_DIRS :=

################################
# d. SOURCE FILES
################################

# COMMON SOURCES
# List source files (i.e. *.c or *.cpp) common to all platforms, separated by space.
# These MUST BE contained within the $(SRC_ROOT) directory, or within a sub-directory
# of it. You can either list files individually, for example:
# "SRC_COM_FILES := main.cpp utils/file_utils.cpp". If you specify files individually,
# like this, there's need to use $(SRC_ROOT) variable as a prefix (although you can).
# Alternatively, the following wildcard specification will automatically pull in all
# cpp files directly under the source root directory: "$(wildcard $(SRC_ROOT)/*.cpp)",
# whereas: "$(wildcard $(SRC_ROOT)/*.cpp) $(wildcard $(SRC_ROOT)*/*.cpp)" will work
# to any depth.
SRC_COMMON_FILES :=

# PLATFORM SOURCES
# Append additional platform specific source files relative to $(SRC_ROOT).
# Example for WIN: win_utils.cpp
SRC_NIX_FILES :=
SRC_WIN_FILES :=

# RESOURCES
# Specify Windows resource (*.rc) files relative to $(SRC_ROOT). These will be
# built and linked under WIN only. This parameter is ignored under LINUX/g++.
RC_WIN_FILES :=

################################
# e. COMPILER/LINKER OPTIONS
################################

# MACRO DEFINES
# Specify pre-defined macros here, excluding any option prefix (such as "-D") as it will be
# added automatically. Adding them here means they do not need to be added to FLAGS below.
# Example: MACRO_MINGW_DEFS := WINDOWS
MACRO_COMMON_DEFS :=
MACRO_GPP_DEFS    :=
MACRO_MINGW_DEFS  := WINDOWS UNICODE _UNICODE
MACRO_MSVC_DEFS   := WINDOWS UNICODE _UNICODE

# EXTERNAL LIBRARY PATHS
# Specify directory paths to external libraries, excluding any option prefix (such as "-L").
# Example: EXTLIB_GPP_DIRS := $(make_root)/lib
EXTLIB_COMMON_DIRS  :=
EXTLIB_GPP_DIRS     :=
EXTLIB_MINGW_DIRS   :=
EXTLIB_MSVC_DIRS    :=

# EXTERNAL LIBRARY NAMES
# Specify library names to external libraries, excluding any option prefix (such as "-l").
# Example, to include "libmyutils.a", specify: EXTLIB_GPP_NAMES := myutils
EXTLIB_COMMON_NAMES :=
EXTLIB_GPP_NAMES    :=
EXTLIB_MINGW_NAMES  :=
EXTLIB_MSVC_NAMES   :=

# CUSTOM COMPILER FLAGS
# Specify compiler options (i.e. "-Wall -frtti" etc.), INCLUDING the option prefix. Note. There
# is no "COMMON" parameter for these flags. Do not include items already specified in the above
# sections, such as libs or common macros.
# Some key g++ options are as follows:
#   -Wall : Warnings all
#   -frtti : Runtime type identification
#   -fexceptions : Support exceptions
#   -std=c++11 : Enable C++ 11 features
#   -fPIC : Position independent code
#   -g : Debug info
#   -g0 : No debug info
#   -O2 : Optimize (level 2)
# IMPORTANT: Do NOT specify -m32 or -m64, as they are specified automatically according to ARCH.
# Under MSVC, do NOT use: "/MT[d]", "/MD[d]", or "/LD[d]", as they are also automatic.
CXX_GPP_REL_FLAGS   := -Wall -fexceptions -std=c++11 -O3 -g0 -DNODEBUG
CXX_GPP_DBG_FLAGS   := -Wall -fexceptions -std=c++11 -O3 -g -DDEBUG
CXX_MINGW_REL_FLAGS := -Wall -fexceptions -std=c++11 -O3 -g0 -DNODEBUG
CXX_MINGW_DBG_FLAGS := -Wall -fexceptions -std=c++11 -O3 -g -DDEBUG
CXX_MSVC_REL_FLAGS  := /W3 /FC /Ox /EHsc /D NODEBUG
CXX_MSVC_DBG_FLAGS  := /W3 /FC /Od /D /EHsc /Z7 /D DEBUG

# CUSTOM LINKER FLAGS
# Specify additional linker flags, i.e. -s (strip)., INCLUDING the option prefix. Note. There
# is no "COMMON" parameter for these flags. IMPORTANT: Do not specify: -m32 -m64 -static or
# -shared, as these are automatic.
LNK_GPP_REL_FLAGS   := -s
LNK_GPP_DBG_FLAGS   :=
LNK_MINGW_REL_FLAGS := -s -Wl,-allow-multiple-definition
LNK_MINGW_DBG_FLAGS := -Wl,-allow-multiple-definition
LNK_MSVC_REL_FLAGS  := /MANIFEST:EMBED /OPT:REF
LNK_MSVC_DBG_FLAGS  := /MANIFEST:EMBED /DEBUG

# RESOURCE COMPILER FLAGS
# Specify options for the Windows resource compiler, INCLUDING the option prefix.
RES_MINGW_REL_FLAGS :=
RES_MINGW_DBG_FLAGS := -DDEBUG
RES_MSVC_REL_FLAGS  :=
RES_MSVC_DBG_FLAGS  := /D DEBUG

################################
# f. PRE/POST BUILD STEPS
################################

# MAKE DEPENDENCIES
# List of optional makefile configurations on which the make should depend. These should be
# other DMX files (i.e. *.conf) either in the same directory, or relative to it. There's no
# need to explicitly specify the $(make_root) variable, as the make process will automatically
# look here. Sub-modules will be made with the same command line options as supplied to the
# parent make. Example: MAKECONF_DEPS := make-sharedlib.conf make-staticlib.conf
MAKECONF_DEPS := 

# PRE-BUILD STEP
# A command automatically invoked PRIOR to building. This may call a simple platform
# specific command, or a bat file on Windows or shell script on LINUX. For filenames, use
# the $(make_root) variable to make them relative to the makefile, rather than the working
# directory. Does nothing if unspecified. Example for LINUX: $(make_root)/pre-build.sh
PREBUILD_NIX :=
PREBUILD_WIN :=

# POST-BUILD STEP
# A command automatically invoked AFTER linking the output. See pre-build for info.
# Example for WIN: $(make_root)/post-build.bat
POSTBUILD_NIX :=
POSTBUILD_WIN :=

# BUILD DISTRIBUTION
# An additional command invoked AFTER building when make is called with the "dist" goal.
# See pre-build for info. Example for LINUX: $(make_root)/make-dist.sh
DISTBUILD_NIX :=
DISTBUILD_WIN :=

################################
# g. MISC
################################

# DO NOT MODIFY
dmx_confmajor := 7

#############################################################################
# EOF
#############################################################################
